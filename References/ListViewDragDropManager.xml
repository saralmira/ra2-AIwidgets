<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ListViewDragDropManager</name>
    </assembly>
    <members>
        <member name="T:WPF.JoshSmith.Adorners.DragAdorner">
            <summary>
            Renders a visual which can follow the mouse cursor,
            such as during a drag-and-drop operation.
            </summary>
        </member>
        <member name="M:WPF.JoshSmith.Adorners.DragAdorner.#ctor(System.Windows.UIElement,System.Windows.Size,System.Windows.Media.Brush)">
            <summary>
            Initializes a new instance of DragVisualAdorner.
            </summary>
            <param name="adornedElement">The element being adorned.</param>
            <param name="size">The size of the adorner.</param>
            <param name="brush">A brush to with which to paint the adorner.</param>
        </member>
        <member name="M:WPF.JoshSmith.Adorners.DragAdorner.GetDesiredTransform(System.Windows.Media.GeneralTransform)">
            <summary>
            Override.
            </summary>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="P:WPF.JoshSmith.Adorners.DragAdorner.OffsetLeft">
            <summary>
            Gets/sets the horizontal offset of the adorner.
            </summary>
        </member>
        <member name="M:WPF.JoshSmith.Adorners.DragAdorner.SetOffsets(System.Double,System.Double)">
            <summary>
            Updates the location of the adorner in one atomic operation.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
        </member>
        <member name="P:WPF.JoshSmith.Adorners.DragAdorner.OffsetTop">
            <summary>
            Gets/sets the vertical offset of the adorner.
            </summary>
        </member>
        <member name="M:WPF.JoshSmith.Adorners.DragAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Override.
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:WPF.JoshSmith.Adorners.DragAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Override.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:WPF.JoshSmith.Adorners.DragAdorner.GetVisualChild(System.Int32)">
            <summary>
            Override.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:WPF.JoshSmith.Adorners.DragAdorner.VisualChildrenCount">
            <summary>
            Override.  Always returns 1.
            </summary>
        </member>
        <member name="T:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1">
            <summary>
            Manages the dragging and dropping of ListViewItems in a ListView.
            The ItemType type parameter indicates the type of the objects in
            the ListView's items source.  The ListView's ItemsSource must be
            set to an instance of ObservableCollection of ItemType, or an
            Exception will be thrown.
            </summary>
            <typeparam name="ItemType">The type of the ListView's items.</typeparam>
        </member>
        <member name="M:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1.#ctor">
            <summary>
            Initializes a new instance of ListViewDragManager.
            </summary>
        </member>
        <member name="M:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1.#ctor(System.Windows.Controls.ListView)">
            <summary>
            Initializes a new instance of ListViewDragManager.
            </summary>
            <param name="listView"></param>
        </member>
        <member name="M:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1.#ctor(System.Windows.Controls.ListView,System.Double)">
            <summary>
            Initializes a new instance of ListViewDragManager.
            </summary>
            <param name="listView"></param>
            <param name="dragAdornerOpacity"></param>
        </member>
        <member name="M:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1.#ctor(System.Windows.Controls.ListView,System.Boolean)">
            <summary>
            Initializes a new instance of ListViewDragManager.
            </summary>
            <param name="listView"></param>
            <param name="showDragAdorner"></param>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1.DragAdornerOpacity">
            <summary>
            Gets/sets the opacity of the drag adorner.  This property has no
            effect if ShowDragAdorner is false. The default value is 0.7
            </summary>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1.IsDragInProgress">
            <summary>
            Returns true if there is currently a drag operation being managed.
            </summary>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1.MinimumHorizontalDragDistance">
            <summary>
            Gets or sets optional minimal distance mouse pointer has to be dragged horizontally before it is considered a drag operation.
            If value is not set, <see cref="P:System.Windows.SystemParameters.MinimumHorizontalDragDistance"/> is used.
            Set to <see cref="F:System.Double.PositiveInfinity"/> to prevent horizontal drag
            (which does not make sense with standard ListView's vertical layout).
            </summary>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1.MinimumVerticalDragDistance">
            <summary>
            Gets or sets optional minimal distance mouse pointer has to be dragged vertically before it is considered a drag operation.
            If value is not set, <see cref="P:System.Windows.SystemParameters.MinimumVerticalDragDistance"/> is used.
            Set to <see cref="F:System.Double.PositiveInfinity"/> to prevent vertical drag.
            </summary>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1.DraggingPrecondition">
            <summary>
            Gets or sets precondition for dragging. If set to <c>null</c> (default value) drag is always allowed.
            Provided <see cref="T:System.Windows.Point"/> is the mouse position relative to the list view.
            </summary>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1.ListView">
            <summary>
            Gets/sets the ListView whose dragging is managed.  This property
            can be set to null, to prevent drag management from occuring.  If
            the ListView's AllowDrop property is false, it will be set to true.
            </summary>
        </member>
        <member name="E:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1.ProcessDrop">
            <summary>
            Raised when a drop occurs.  By default the dropped item will be moved
            to the target index.  Handle this event if relocating the dropped item
            requires custom behavior.  Note, if this event is handled the default
            item dropping logic will not occur.
            </summary>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1.ShowDragAdorner">
            <summary>
            Gets/sets whether a visual representation of the ListViewItem being dragged
            follows the mouse cursor during a drag operation.  The default value is true.
            </summary>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1.IndexUnderDragCursor">
            <summary>
            Returns the index of the ListViewItem underneath the
            drag cursor, or -1 if the cursor is not over an item.
            </summary>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ListViewDragDropManager`1.IsMouseOverScrollbar">
            <summary>
            Returns true if the mouse cursor is over a scrollbar in the ListView.
            </summary>
        </member>
        <member name="T:WPF.JoshSmith.ServiceProviders.UI.ListViewItemDragState">
            <summary>
            Exposes attached properties used in conjunction with the ListViewDragDropManager class.
            Those properties can be used to allow triggers to modify the appearance of ListViewItems
            in a ListView during a drag-drop operation.
            </summary>
        </member>
        <member name="F:WPF.JoshSmith.ServiceProviders.UI.ListViewItemDragState.IsBeingDraggedProperty">
            <summary>
            Identifies the ListViewItemDragState's IsBeingDragged attached property.
            This field is read-only.
            </summary>
        </member>
        <member name="M:WPF.JoshSmith.ServiceProviders.UI.ListViewItemDragState.GetIsBeingDragged(System.Windows.Controls.ListViewItem)">
            <summary>
            Returns true if the specified ListViewItem is being dragged, else false.
            </summary>
            <param name="item">The ListViewItem to check.</param>
        </member>
        <member name="M:WPF.JoshSmith.ServiceProviders.UI.ListViewItemDragState.SetIsBeingDragged(System.Windows.Controls.ListViewItem,System.Boolean)">
            <summary>
            Sets the IsBeingDragged attached property for the specified ListViewItem.
            </summary>
            <param name="item">The ListViewItem to set the property on.</param>
            <param name="value">Pass true if the element is being dragged, else false.</param>
        </member>
        <member name="F:WPF.JoshSmith.ServiceProviders.UI.ListViewItemDragState.IsUnderDragCursorProperty">
            <summary>
            Identifies the ListViewItemDragState's IsUnderDragCursor attached property.
            This field is read-only.
            </summary>
        </member>
        <member name="M:WPF.JoshSmith.ServiceProviders.UI.ListViewItemDragState.GetIsUnderDragCursor(System.Windows.Controls.ListViewItem)">
            <summary>
            Returns true if the specified ListViewItem is currently underneath the cursor
            during a drag-drop operation, else false.
            </summary>
            <param name="item">The ListViewItem to check.</param>
        </member>
        <member name="M:WPF.JoshSmith.ServiceProviders.UI.ListViewItemDragState.SetIsUnderDragCursor(System.Windows.Controls.ListViewItem,System.Boolean)">
            <summary>
            Sets the IsUnderDragCursor attached property for the specified ListViewItem.
            </summary>
            <param name="item">The ListViewItem to set the property on.</param>
            <param name="value">Pass true if the element is underneath the drag cursor, else false.</param>
        </member>
        <member name="T:WPF.JoshSmith.ServiceProviders.UI.ProcessDropEventArgs`1">
            <summary>
            Event arguments used by the ListViewDragDropManager.ProcessDrop event.
            </summary>
            <typeparam name="ItemType">The type of data object being dropped.</typeparam>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ProcessDropEventArgs`1.ItemsSource">
            <summary>
            The items source of the ListView where the drop occurred.
            </summary>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ProcessDropEventArgs`1.DataItem">
            <summary>
            The data object which was dropped.
            </summary>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ProcessDropEventArgs`1.OldIndex">
            <summary>
            The current index of the data item being dropped, in the ItemsSource collection.
            </summary>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ProcessDropEventArgs`1.NewIndex">
            <summary>
            The target index of the data item being dropped, in the ItemsSource collection.
            </summary>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ProcessDropEventArgs`1.AllowedEffects">
            <summary>
            The drag drop effects allowed to be performed.
            </summary>
        </member>
        <member name="P:WPF.JoshSmith.ServiceProviders.UI.ProcessDropEventArgs`1.Effects">
            <summary>
            The drag drop effect(s) performed on the dropped item.
            </summary>
        </member>
        <member name="T:WPF.JoshSmith.Controls.Utilities.MouseUtilities">
            <summary>
            Provides access to the mouse location by calling unmanaged code.
            </summary>
            <remarks>
            This class was written by Dan Crevier (Microsoft).
            http://blogs.msdn.com/llobo/archive/2006/09/06/Scrolling-Scrollviewer-on-Mouse-Drag-at-the-boundaries.aspx
            </remarks>
        </member>
        <member name="M:WPF.JoshSmith.Controls.Utilities.MouseUtilities.GetMousePosition(System.Windows.Media.Visual)">
            <summary>
            Returns the mouse cursor location.  This method is necessary during
            a drag-drop operation because the WPF mechanisms for retrieving the
            cursor coordinates are unreliable.
            </summary>
            <param name="relativeTo">The Visual to which the mouse coordinates will be relative.</param>
        </member>
    </members>
</doc>
